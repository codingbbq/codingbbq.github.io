"use strict";(self.webpackChunkcodingbbq_github_io=self.webpackChunkcodingbbq_github_io||[]).push([[849],{6164:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Intro","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"JavaScript","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"JavaScript Closures","href":"/docs/JavaScript/closures","docId":"JavaScript/closures","unlisted":false},{"type":"link","label":"How does the new keyword work with a function that is not a class in JavaScript?","href":"/docs/JavaScript/constructor-functions","docId":"JavaScript/constructor-functions","unlisted":false},{"type":"link","label":"Event Loop In JavaScript","href":"/docs/JavaScript/event-loop-javascript","docId":"JavaScript/event-loop-javascript","unlisted":false},{"type":"link","label":"Promises in JavaScript","href":"/docs/JavaScript/promise","docId":"JavaScript/promise","unlisted":false},{"type":"link","label":"What is Prototypal Inhertiance in JavaScript ?","href":"/docs/JavaScript/prototypal-inheritance","docId":"JavaScript/prototypal-inheritance","unlisted":false}],"href":"/docs/category/javascript"},{"type":"category","label":"Cloud","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"AWS","href":"/docs/Cloud/AWS","docId":"Cloud/AWS","unlisted":false}],"href":"/docs/category/cloud"}]},"docs":{"Cloud/AWS":{"id":"Cloud/AWS","title":"AWS","description":"Amazon Cloud Practitioner","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Intro","description":"Throughout my career in the tech industry, I have had the privilege of working on a wide range of projects, from small web shops to large-scale enterprise applications. This diverse experience has provided me with valuable insights and learnings that I would like to share.","sidebar":"tutorialSidebar"},"JavaScript/closures":{"id":"JavaScript/closures","title":"JavaScript Closures","description":"A closure is a combination of a function bundled together with reference to its surroundings.","sidebar":"tutorialSidebar"},"JavaScript/constructor-functions":{"id":"JavaScript/constructor-functions","title":"How does the new keyword work with a function that is not a class in JavaScript?","description":"The JavaScript\'s new keyword can be used by both classes and functions. In JavaScript functions can be used as constructors to create objects, even if they are not explicitly defined in class.","sidebar":"tutorialSidebar"},"JavaScript/event-loop-javascript":{"id":"JavaScript/event-loop-javascript","title":"Event Loop In JavaScript","description":"JavaScript is single-threaded, meaning it executes code synchronously, one line at a time. To handle asynchronous tasks while maintaining this single-threaded nature, JavaScript uses a runtime model that involves the Call Stack, Message Queue, Microtask Queue, and Event Loop.","sidebar":"tutorialSidebar"},"JavaScript/promise":{"id":"JavaScript/promise","title":"Promises in JavaScript","description":"Questions about promises in JavaScript","sidebar":"tutorialSidebar"},"JavaScript/prototypal-inheritance":{"id":"JavaScript/prototypal-inheritance","title":"What is Prototypal Inhertiance in JavaScript ?","description":"Prototypal Inheritance is a feature in JavaScript in which Objects can inherit properties and methods from other objects. Every JavaScript object has an internal link to another object called its prototype. This inturn can have its own prototype form a chain called as prototype chain.","sidebar":"tutorialSidebar"}}}}')}}]);