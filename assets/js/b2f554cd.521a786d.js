"use strict";(self.webpackChunkcodingbbq_github_io=self.webpackChunkcodingbbq_github_io||[]).push([[5894],{6042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"software-simplification","metadata":{"permalink":"/blog/software-simplification","source":"@site/blog/2024-05-04-Lessons-Software-Simplification.md","title":"Lessons in Software Simplification - From AngularJS to Vanilla JS","description":"8 Years ago\u2026","date":"2024-05-04T00:00:00.000Z","formattedDate":"May 4, 2024","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"software","permalink":"/blog/tags/software"},{"label":"experience","permalink":"/blog/tags/experience"}],"readingTime":3.12,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"software-simplification","title":"Lessons in Software Simplification - From AngularJS to Vanilla JS","tags":["personal","software","experience"]},"nextItem":{"title":"PR#458 - My Prodest PR yet!!!","permalink":"/blog/proudest-pr-yet"}},"content":"8 Years ago\u2026\\r\\n\\r\\nAngularJS was very popular library and talk of the town. \\r\\n\\r\\nThe Software product had a requirement of providing a search solution with display of tabular data / pagination etc. with some UI animation.\\r\\n\\r\\nIt was decided by the tech lead and the management to go with AngularJS and there could be various reasons for it, possibly:\\r\\n\\r\\n- AngularJS was popular framework\\r\\n- Going forward all the new features in this software product had to be developed using AngularJS\\r\\n- It is always exciting to work on a new technology irrespective of figuring out if it actually is needed.\\r\\n\\r\\nThis feature was released and praised, but over the years, there have been no instances of this library being used for any other features, reasons:\\r\\n\\r\\n- Continued usage of the legacy framework, it being the obvious choice\\r\\n- The rising popularity of Angular2 over AngularJS causing lack of time and interest.\\r\\n- Lack of resources / technical skills in AngularJS\\r\\n\\r\\nSo, this huge product had AngularJS as a low hanging fruit, used only for one single feature.\\r\\n\\r\\nHowever, security fixes to AngularJS library were patched whenever available. \\r\\n\\r\\n### Transition from AngularJS to Vanilla JavaScript\\r\\n\\r\\nFast forward to today, and our feature remains, but the landscape has shifted.  AngularJS is officially deprecated and so we had to reevaluate our choice.\\r\\n\\r\\n- AngularJS library is deprecated.\\r\\n- Security concerns from customers\\r\\n- In this entire product, AngularJS is just used for this one feature.\\r\\n\\r\\nWe chose to use Vanilla JavaScript for various reasons, though the specifics are not relevant here.\\r\\n\\r\\nWhen I began working on this feature, it became clear that Vanilla JavaScript could effortlessly provide the same functionality.\\r\\n\\r\\n### Over-Engineering and Unnecessary Complexity in the Original Code\\r\\n\\r\\nAfter careful evaluation of the code, it appeared that this feature was over-engineered.\\r\\n\\r\\n- I discovered unused or infrequently used library files, bootstrap files, and a templating engine library.\\r\\n- I believe these libraries were added with the assumption that they would be useful for developing new features in the future. However, this turned out not to be the case.\\r\\n- Naturally, no one wanted to work with this code again, so all the core library files were left untouched.\\r\\n- There were clear violations of the DRY (Don\'t Repeat Yourself) and KISS (Keep It Simple, Stupid) design principles, indicating areas for improvement.\\r\\n\\r\\n### Enter the era of simplification.\\r\\n\\r\\nOpting for vanilla JavaScript, we embarked on a journey to streamline our codebase and embrace the principles of DRY (Don\'t Repeat Yourself), KISS (Keep It Simple, Stupid), and YAGNI (You Ain\'t Gonna Need It).\\r\\n\\r\\nThe entire exercise of removing AngularJs involved the following steps:\\r\\n\\r\\n- Reviewing and understanding the entire feature\\r\\n- Reading the AngularJS code and identifying areas for improvement\\r\\n- Rewriting the entire feature using vanilla JavaScript\\r\\n- Ensuring the transformation does not affect the user, as only the underlying technology is being changed, not the user experience.\\r\\n\\r\\n### The Transformation: From Excessive to Efficient Coding\\r\\n\\r\\nWhat began as an experiment turned into a revelation. With over 16K lines of unnecessary clutter stripped away, and under 1K lines of focused, purposeful addition, we emerged with a leaner, more efficient feature.\\r\\n\\r\\n![Simplification](./assets/images/KISS.png)\\r\\n\\r\\nThe journey wasn\'t without its challenges, but it was immensely rewarding. We honed our skills, boosted our confidence, and left behind a codebase that is not just functional, but elegant and maintainable.\\r\\n\\r\\n- Increased my confidence in working independently on a feature.\\r\\n- Enhanced my ability to read any framework code and convert it to vanilla JavaScript.\\r\\n- Deepened my understanding of vanilla JavaScript.\\r\\n- Refactored the code, making it more readable and maintainable.\\r\\n\\r\\nAs we continue to evolve, let\'s remember the value of simplicity, the power of pragmatism, and the importance of continuous improvement."},{"id":"proudest-pr-yet","metadata":{"permalink":"/blog/proudest-pr-yet","source":"@site/blog/2024-04-15-My-Proudest-PR-yet.md","title":"PR#458 - My Prodest PR yet!!!","description":"In this blog post, I am thrilled to share the story behind my proudest Pull Request (PR) yet. PR#458 wasn\'t just another contribution but a significant milestone in my journey as a software developer. It was a challenging task that pushed me to my limits, and in overcoming those challenges, I learned valuable lessons that have shaped my approach to coding.","date":"2024-04-15T00:00:00.000Z","formattedDate":"April 15, 2024","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"software","permalink":"/blog/tags/software"},{"label":"experience","permalink":"/blog/tags/experience"}],"readingTime":4.6,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"proudest-pr-yet","title":"PR#458 - My Prodest PR yet!!!","tags":["personal","software","experience"]},"prevItem":{"title":"Lessons in Software Simplification - From AngularJS to Vanilla JS","permalink":"/blog/software-simplification"},"nextItem":{"title":"5 Reasons to enjoy working on Legacy code","permalink":"/blog/working-with-legacy-code"}},"content":"In this blog post, I am thrilled to share the story behind my proudest Pull Request (PR) yet. PR#458 wasn\'t just another contribution but a significant milestone in my journey as a software developer. It was a challenging task that pushed me to my limits, and in overcoming those challenges, I learned valuable lessons that have shaped my approach to coding.\\r\\n\\r\\n## By the Numbers\\r\\nBefore we delve into the story, let\'s take a moment to appreciate the sheer scale of this Pull Request. It comprised nearly 10 individual commits, introduced close to 2,800 new lines of code, and astonishingly, resulted in the deletion or modification of over 314,400 lines across almost 1,000 files.\\r\\n\\r\\n## History\\r\\nThe project I worked on has a rich history spanning almost two decades, evolving from a Windows application to a browser-based web app with a diverse tech stack.\\r\\nThis enterprise application has made careers of many software engineers, which means this codebase had been touched by many software engineers.\\r\\nWith wide tech stack such as CPP, Java and Dojo framework on the UI, over the years, it accumulated tech debt, and my role primarily focused on UI enhancements and refactoring.\\r\\n\\r\\n## The need for a change\\r\\nThe accumulation of tech debt prompted a thorough review of the codebase to identify areas for improvement:\\r\\n\\r\\n- Removal of unused assets and code snippets.\\r\\n- Refactoring of legacy code to improve readability and maintainability.\\r\\n- Elimination of support for outdated browsers.\\r\\n- Streamlining of build scripts to remove unnecessary generated files.\\r\\n\\r\\n## Motivational Quotes\\r\\nI came across a tweet from Elon Musk that resonated deeply with me: \\"Far better to delete code than add it.\\" This philosophy encapsulates the essence of efficient software development. While striving for 100% optimized and performant code from day one may seem ideal, the reality is that codebases evolve over time, accumulating unnecessary complexities and redundancies.\\r\\n\\r\\nAnother quote I hold dear is, \\"Always leave the code better than you found it,\\" attributed to Ward Cunningham. This mindset drove me to embark on a journey of code refactoring and deletion, particularly in a legacy codebase spanning two decades.\\r\\n\\r\\nGiven that we were at the onset of a new release cycle, it presented the perfect opportunity to implement these changes.\\r\\nIn the process, I identified several areas ripe for improvement:\\r\\n\\r\\n- Eliminating unused styles and assets meticulously, even if they were part of the codebase for years.\\r\\n- Letting go of support for outdated browsers, such as IE6, as their usage dwindled over time.\\r\\n- Since our project utilized the Dojo framework, it came with its own set of theme files. I painstakingly sifted through these files, pinpointing and eliminating any redundant styles that were no longer in use.\\r\\n- Streamlining build scripts to remove unnecessary auto-generated files, optimizing the build process.\\r\\n\\r\\nThese actions required patience and thorough unit testing at every stage to ensure they didn\'t impact existing functionality adversely. By adhering to these principles and embracing the challenge of improving legacy code, I not only enhanced the codebase\'s quality but also cultivated a mindset of continuous improvement in software development.\\r\\n\\r\\nWe diligently conducted unit tests at every stage to ensure that our changes didn\'t inadvertently impact any existing functionality.\\r\\n\\r\\nIn the end, this comprehensive cleanup effort not only improved the overall quality of our codebase but also positioned us for smoother development cycles in the future.\\r\\n\\r\\n## The Result\\r\\nThe PR was not only about code changes but also about personal growth:\\r\\n\\r\\n- Increased confidence in tackling a codebase spanning two decades.\\r\\n- Improved code readability and maintainability.\\r\\n- Timely refactoring to prevent future tech debt.\\r\\n- Opened doors for new opportunities and stretch assignments.\\r\\n\\r\\n## Room for improvement\\r\\nWhile I\'m incredibly proud of this PR, reflecting on it, there are areas where I could have refined my approach:\\r\\n\\r\\n- *Learning Opportunity:* This PR provided me with a valuable opportunity to delve deep into the codebase, uncovering insights and learning valuable lessons along the way. It\'s crucial to leverage such opportunities for continuous growth and improvement.\\r\\n\\r\\n- *Confidence Boost:* Deleting code can be daunting, especially when it seems to be functioning correctly. However, this experience reinforced my confidence in making impactful changes to enhance the codebase\'s quality and performance.\\r\\n\\r\\n- *Enhanced Readability and Maintainability:* By eliminating unused code and improving overall code cleanliness, we not only optimized performance but also made future development efforts more efficient. Why burden ourselves with code that serves no purpose? Additionally, utilizing version control tools like Git and GitHub ensures that we can always reference previous versions if needed.\\r\\n\\r\\n- *Doors to New Opportunities:* Although this PR focused on code cleanup rather than adding new features, it opened doors to exciting opportunities. It demonstrated my commitment to maintaining code quality and readiness to tackle tech debt, qualities that are highly valued in any development team.\\r\\n\\r\\nIn hindsight, I could have further optimized my approach:\\r\\n\\r\\n- Breaking down the tasks into smaller, more focused PRs could have facilitated smoother integration and minimized the risk of unintended side effects. This iterative approach would have allowed for more granular testing and validation over multiple production builds, ensuring a seamless transition.\\r\\n\\r\\n## Conclusion\\r\\nIn conclusion, working on PR#458 was an enriching experience:\\r\\n\\r\\n- Deepened my understanding of the codebase.\\r\\n- Boosted my confidence in refactoring and deletion.\\r\\n- Enhanced the overall quality of the codebase.\\r\\n- Presented new opportunities for professional growth and learning.\\r\\n- Overall, PR#458 represents not just a code contribution but a journey of growth, learning, and improvement."},{"id":"working-with-legacy-code","metadata":{"permalink":"/blog/working-with-legacy-code","source":"@site/blog/2022-11-19-Enjoy-Working-Legacy-Code.md","title":"5 Reasons to enjoy working on Legacy code","description":"Working on legacy code has its own advantages and in this post I want to talk about how I enjoy and appreciate working on code that is dated as old as 15+ years.","date":"2022-11-19T00:00:00.000Z","formattedDate":"November 19, 2022","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"software","permalink":"/blog/tags/software"},{"label":"essays","permalink":"/blog/tags/essays"}],"readingTime":2.12,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"working-with-legacy-code","title":"5 Reasons to enjoy working on Legacy code","tags":["personal","software","essays"]},"prevItem":{"title":"PR#458 - My Prodest PR yet!!!","permalink":"/blog/proudest-pr-yet"},"nextItem":{"title":"Everyone should learn UX","permalink":"/blog/everyone-should-learn-ux"}},"content":"Working on legacy code has its own advantages and in this post I want to talk about how I enjoy and appreciate working on code that is dated as old as 15+ years.\\r\\n\\r\\nYou do not always get to start a project from scratch. Any software product usually evolves over time and ensuring that all the future developments are robust requires considerable efforts.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nWhile I have worked on both new projects from scratch to legacy products and both have immense learning opportunities, I want to write about how I enjoyed working on Legacy code that was dated as old as 15+ years.\\r\\n\\r\\n## 1) Code is poetry\\r\\n\\r\\nThis is the most famous wordpress tagline to which I concur. I have had amazing time going through the existing code written over span of 15+ years. \\r\\n\\r\\nWith the developer friendly tools, it is easier to debug code, so learning about why a certain piece of code was written, you learn a lot about the philosophy of the software.\\r\\n\\r\\n## 2) Boosts confidence\\r\\n\\r\\nLearning to read someone else\u2019s code and appreciating their thought process helps you make better decisions. It gives you confidence to go with the existing solution or challenge the existing solution. Either way, it benefits the software product overall.\\r\\n\\r\\n## 3) Scope of improvement\\r\\n\\r\\nThere is always the scope for improvement. I enjoyed creating Pull Requests to tackle code smells such as\\r\\n\\r\\n- Removing code that was specifically written to support certain IE version\\r\\n- Refactoring functions\\r\\n- Removing inline styles\\r\\n- Separating the JS from HTML code\\r\\n\\r\\n## 4) Documentation\\r\\n\\r\\nComplex software such as these that are evolved over 15 years of time have a lot of scope for documentation. Adding new comments is easy, but improving existing comments / documentation requires thorough understanding of the code. \\r\\n\\r\\n## 5) Appreciation for Knowledge sharing\\r\\n\\r\\nIt is easy to complain about someone else\u2019s code. However, I have enjoyed going through the history of the commits and the JIRA tickets dated 10 years from now and have appreciated the detailed documentation that the developers at the time wrote. It takes patience to dig through the history but it is worth the efforts.\\r\\n\\r\\nI am thankful to detailed documentation I have, I am also responsible towards ensuring that all my commits have traceable JIRA tickets linked for anyone in the future.\\r\\n\\r\\nTo summarize\\r\\n\\r\\n- Embrace the code, enjoy the learning.\\r\\n- Take up the opportunity to improve the code and take complete ownership.\\r\\n- Read and Contribute to the documentation as much as possible."},{"id":"everyone-should-learn-ux","metadata":{"permalink":"/blog/everyone-should-learn-ux","source":"@site/blog/2022-02-18-Everyone-should-learn-UX.md","title":"Everyone should learn UX","description":"With technology, digitization and access of internet, things are moving ahead at rapid pace. I feel that User experience (UX) is the most valuable skill that everyone should possess.","date":"2022-02-18T12:10:42.000Z","formattedDate":"February 18, 2022","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"learnings","permalink":"/blog/tags/learnings"},{"label":"essays","permalink":"/blog/tags/essays"}],"readingTime":7.525,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"everyone-should-learn-ux","title":"Everyone should learn UX","date":"2022-02-18 12:10:42 +0530","tags":["personal","learnings","essays"]},"prevItem":{"title":"5 Reasons to enjoy working on Legacy code","permalink":"/blog/working-with-legacy-code"},"nextItem":{"title":"First time attending a meetup - My Experience","permalink":"/blog/attending-meetup"}},"content":"With technology, digitization and access of internet, things are moving ahead at rapid pace. I feel that User experience (UX) is the most valuable skill that everyone should possess. \\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\n### **History**\\r\\n\\r\\nIn the early 2000\u2019s, we had UI developer and Backend developer.\\r\\n\\r\\nAll the tech shops worked as follows.\\r\\n\\r\\nUI developer would design a website in photoshop, then convert it to html pages.\\r\\n\\r\\nBackend developer would take the pages developed by the UI developer and convert it to a functional web app with PHP as server side language and MYSQL as database.\\r\\n\\r\\n### A little about UX in my own words\\r\\n\\r\\nWith technology, digitization and everything on our fingertips, to innovate and build a product for the masses, we also need to evolve with time. If we have to consider the IT domain, we have experts in Front end, Back end and most importantly UX (User Experience).  There are many other important roles, but for this blog post, let\u2019s focus on the UX role.\\r\\n\\r\\nPhotoshop is no longer even a choice when designing a web app. Photoshop is now back to its original use case i.e photo retouching. \\r\\n\\r\\nTo design and develop a web app, we have tools like Invision, Adobe XD, Figma etc. However, before we have identified how the app will look like, we have a dedicated team of UX (User Experience) experts who develop a prototype of the web app.\\r\\n\\r\\nA UX Expert would design a flow of the web app considering the end user in mind. They would talk to the actual customer or identify a persona so that a user flow can be designed. This is a key criteria to ensure that the actual goal of creating a web app is fulfilled.\\r\\n\\r\\nIn our scenario of developing a digital product i.e. a Web application,  UX exert needs to primarily take care of two things\\r\\n\\r\\n- **The user flow**\\r\\n    \\r\\n    **For eg. Think of eCommerce app that let\u2019s you buy books.** \\r\\n    \\r\\n    There are various scenario\u2019s that we need to consider here\\r\\n    \\r\\n    - A user knows what they want to buy\\r\\n        \\r\\n        They search the book, add to cart and get it delivered.\\r\\n        \\r\\n    - A user is looking to gift a book\\r\\n        \\r\\n        They need to search based on age, gender, author, genre of the book etc. etc. A lot of criteria come into picture, before actual buying happens.\\r\\n        \\r\\n    - A user wants to browse books and save them in Wishlist\\r\\n- The Actual web app\\r\\n    \\r\\n    What I mean by this is, placing a button where a button needs to be present. There have been various studies on how a user views a web app on a desktop browser, how they interact on a mobile device etc. \\r\\n    \\r\\n    - Let\u2019s say that our eCommerce web app is entirely dependent on user\u2019s search. This means that we need to keep the input search right on the top of the web page so that it is prominent.\\r\\n    - Use of icons. We have standard icons for user, shopping cart etc. so the UX should know which icon should be shown next to a particular item.\\r\\n    - Add to cart should be primary button. Proceed to pay should be a prominent button.\\r\\n\\r\\nThe idea of this entire exercise and involvement of a UX expert is that the entire experience of the web application, from landing on the web page to buying should be extremely easy to follow, it should be hassle free and the user should be able to perform their desired actions without anyone\u2019s assistance.\\r\\n\\r\\n### Why should anyone learn UX ?\\r\\n\\r\\nUX is more than what we have summarized above. Perhaps I did not even do Justice to the amount of work an UX expert does. However, with above summary, I wanted to lay a premise so that we can proceed with why everyone should learn UX.\\r\\n\\r\\nJust like an UX Expert looks for a persona (the aspect of someone\'s character that is presented to or perceived by others), let me first define who \u201canyone\u201d here is, what is the persona that this blog post is targeted towards.\\r\\n\\r\\nWe could be anything and not limited to the below\\r\\n\\r\\n- Some technical artisan (Full stack, Back End, Dev ops etc.)\\r\\n- A home maker\\r\\n- A business owner\\r\\n- A creative ninja (artist, craftsmen etc.)\\r\\n\\r\\n### Consider below user persona\\r\\n\\r\\n### 1) Content Consumer\\r\\n\\r\\nWe live in the digital world. From watsapp video calls, to booking a travel ticket online, we interact with almost everything on our smart phone, smart watch or the TV. We create content and we consume content in and out, so we ourselves are heavy users of applications. If we had to book a travel ticket but after opening the app, we were not able to figure out how to login, imagine how frustrating it would be.  Would we visit a food deliver app if it could not identify our location and suggest some restaurant that is impossible to our reach ?\\r\\n\\r\\nWith that, I can easily assume that we being the consumers, are qualified to give suggestions on how a user experience should be. \\r\\n\\r\\nSo if we can put in little efforts and understand the basic nuances of the world of UX, we can be of great help towards making any application a rich application.\\r\\n\\r\\n### 2) Content creators\\r\\n\\r\\n**A business owner** always looks out for graphic designers to create flyers for them so that their business can be advertised.\\r\\n\\r\\n**A home maker**, although not into business but would and should always look out to advertise their hobby. We are always honored to cook a meal for our family and friends. We put in all the heart into decorating it. Would we not want to show it to the world through our instagram or watsapp ? \\r\\n\\r\\nConsidering the above two eg. (A business owner and A home maker), what I am trying to convey is that everyone is a content creator. Everyone wishes to publish on their story a picture they are proud of. \\r\\n\\r\\nIf we know how to design beautiful and catchy images, we are sorted. \\r\\n\\r\\nHow does UX play a role here ?\\r\\n\\r\\nAn image that has no caption, a phone number that does not have a beautiful icon, would be less attractive and not so catchy. Similarly, using a lot of different font families, having multiple colors to a single word or even having a lot of text overlay on your image may not be attractive.\\r\\n\\r\\nUX or User experience is something that everyone should have the knowledge. No, we do not want to be an expert but we surely want to know when to fill up that white space or when to show a caption on an image, so that we are able to make such tiny yet effective decisions.\\r\\n\\r\\n### Let\u2019s create Experiences.\\r\\n\\r\\nPhotoshop was the de facto tool for every designer. Anyone who had a computer and photoshop could be a graphic designer. Times have changed.\\r\\n\\r\\n- Canva to the rescue. With internet connection and a smart device, everyone can create experiences. An innovator can easily create prototypes of their ideas, a home maker can play around and share their creativity and promote themselves. Applications like canva, Figma are super easy to use. However imagine the dilemma of not able to create content to your liking and not able to do it right. With some knowledge of UX, you know exactly what you want.\\r\\n- If you are a professional, a backend developer or a front end developer, you have an idea and you need to validate it with a MVP (Minimal viable product), you are golden.\\r\\n    \\r\\n    You have knowledge of UX, you can easily use CSS frameworks like bootstrap and create a minimal working prototype. You are not dependent and blocked because you cannot imagine how the user flow will be and you can concentrate on building your product. \\r\\n    \\r\\n- Quick results and faster Validation of your product with the actual user base.\\r\\n- Stressing over User Experience?  When you have an idea but are blocked because of lack of knowledge of how the UX should be, you will never able to see what that idea could have turned into. We want to create a product, so should we stress over the quality ? We can always refine our product, but if we are not aware of the basics of UX, we would not only waste time but also not have confidence in our own idea.\\r\\n\\r\\n### We all should learn UX\\r\\n\\r\\nNot everyone can be a great designer or an UX expert, but we should at least be able to understand and contribute to user experience. \\r\\n\\r\\nEverything is getting digital and we have to stay ahead of time, so why not invest our time learning a skill that we will be using, knowingly or unknowingly.\\r\\n\\r\\nHave basic knowledge of UX will definitely help us in every aspect of our day to day life. We want a rich, delightful experience from whatever we consume. Why not give the same experience to whatever we create ?"},{"id":"attending-meetup","metadata":{"permalink":"/blog/attending-meetup","source":"@site/blog/2019-10-07-First-time-attending-a-meetup.md","title":"First time attending a meetup - My Experience","description":"A group of individuals with common interest plan to meet to share their knowledge and network. This is my definition of a Meetup. I have read several blogs about meetup\'s but never attended any. I did not plan anything nor did I know about this meetup until a day before. It was just on the spur of the moment. I am glad, I attended this meetup and hence sharing my experience through this blog post.","date":"2019-10-07T00:00:00.000Z","formattedDate":"October 7, 2019","tags":[{"label":"learning","permalink":"/blog/tags/learning"},{"label":"personal","permalink":"/blog/tags/personal"},{"label":"meetup","permalink":"/blog/tags/meetup"}],"readingTime":5.84,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"attending-meetup","title":"First time attending a meetup - My Experience","tags":["learning","personal","meetup"]},"prevItem":{"title":"Everyone should learn UX","permalink":"/blog/everyone-should-learn-ux"},"nextItem":{"title":"The minimalist phone","permalink":"/blog/the-minimalist-phone"}},"content":"A group of individuals with common interest plan to meet to share their knowledge and network. This is my definition of a Meetup. I have read several blogs about meetup\'s but never attended any. I did not plan anything nor did I know about this meetup until a day before. It was just on the spur of the moment. I am glad, I attended this meetup and hence sharing my experience through this blog post.  \\r\\n\\r\\nI have no clue what made me register on the meetup.com website. It was Friday evening, I was about to wrap up my daily office work. I pointed my browser to meetup.com and registered. The website popped at me a meetup that was happening on Saturday 05th of Oct 2019 from 10.00 AM to 12.00 PM. The host were sharing their experience about <b>React with Typescript == React on Steroids</b>. Interesting. I wanted to learn about it. Unfortunately, RSVP were closed. \\"I could always watch about such topic on YouTube\\", I thought.\\r\\n\\r\\nSurprisingly, someone in the comment had mentioned that no need of RSVP, everyone is welcome. I did not have any excuse but attend.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## What is a Meetup?\\r\\nLike minded individuals get together on a decided place at a particular time. They share knowledge and their experience on a particular topic. Technology related meetups are usually hosted by companies on their premises.\\r\\nIt is well proven fact that if you want to remember something that you have learned, the best way is to teach and share that knowledge.\\r\\nIn the technology domain, there are multiple ways of doing the same thing. The most optimized way is preferred. Thus, when well experienced individuals from different companies/domain get together to learn and share their knowledge, there is bound to have an amazing learning experience. \\r\\n\\r\\nIn a Meetup, we discuss, share, learn and unlearn.\\r\\n\\r\\n![Meetup](./assets/images/equal-experts-meetup.jpg)\\r\\n\\r\\n## My Experience\\r\\nThe meetup was hosted by \\"Equal Experts\\". The topic of discussion was \\"React with Typescript == React on Steroids\\".  At first, I was sceptical about attending the meetup, but the moment I entered their premises, I was convinced. They had a very pleasant workspace, huge monitors and the projector and mic system were already in place. The speakers were ready. On time. I filled in my basic information and made myself comfortable to the nearest empty seat.\\r\\n\\r\\n## The best part\\r\\nThe discussion. I could feel the sync between the topic and the questions that the participants asked related to the topic. It was streamlined by the organizers and everyone was heard. I believe the most important factor in a small group discussion is that everyone wants to be part of the discussion and be heard. We all want to contribute our knowledge and share our experiences. I guess, that is why story telling has its existence.\\r\\n\\r\\nIn the meetup, I found myself engrossed in the stories and experiences that were shared.\\r\\n\\r\\n## What I learned?\\r\\n- Typescript is truly important in a large project which has multiple developers. Angular 2+ realized the importance of Typescript and took a leap towards it. React has an amazing community which provides @Type definitions for it. \\r\\n- Creating a custom type means you will have to write an interface. Despite of knowing this, I asked this question to reconfirm my knowledge. Let\'s say you want to create a custom type `Accounts`, you would be creating an interface which would have all the properties that you need in that custom type. \\r\\n- You can have a union of two Types associated to an object. Let\'s say there is an `Employee` object that needs to have two custom types, i.e `Accounts` and `AccountNumber`. We can use the `&` operator to allow both the types assigned to `Employee`. I had earlier experienced this situation where some property were not present in my interface definition and I was confused whether edit the existing interface or create a new interface including the new properties. So I could relate the importance of the `&` operator. \\r\\n- Typescript is just a icing on the cake. It is used during the development time to help developer write error free code. The IDE intelli-sense would shout at you with the red squiglly lines in case you introduced any issues in the code. When the code is build and pushed to production, all your typescript code is scrapped out. Thus, it is important to note that you should include your TypeScript in the dev-dependencies in the package.json file. \\r\\n\\r\\n## Example\\r\\n\\r\\nLet us consider below example. We are creating an interface which means we are creating a custom type. So `SquareConfig` is a type which will have two properties `color` and `width`.  `color` will always be of type `string` and `width` will always be of type `number`. The `?` after the property name means that these are optional properties. \\r\\n\\r\\n```javascript\\r\\n\\r\\ninterface SquareConfig {\\r\\n    color?: string;\\r\\n    width?: number;\\r\\n}\\r\\n\\r\\n```\\r\\n\\r\\nAfter we create our custom type, we use it in below function. So the `createSquare` function accepts one parameter/argument `config` and it\'s type should be `SquareConfig`. \\r\\nNow notice the code after the closing bracket of function name, before the `{` bracket, i.e `: {color: string, area: number}`. This represents the return type of the function. What it means that the function should always return an object which will have a property `color` of type `string` and `area` which is of type `number`.\\r\\n\\r\\n```javascript\\r\\n\\r\\nfunction createSquare(config: SquareConfig): {color: string; area: number} {\\r\\n    let newSquare = {color: \\"white\\", area: 100};\\r\\n    if (config.color) {\\r\\n        newSquare.color = config.color;\\r\\n    }\\r\\n    if (config.width) {\\r\\n        newSquare.area = config.width * config.width;\\r\\n    }\\r\\n    return newSquare;\\r\\n}\\r\\n\\r\\nlet mySquare = createSquare({color: \\"black\\"});\\r\\n\\r\\n\\r\\n```\\r\\n\\r\\nFrom above example we learn that, when defining a function we can construct in such a way that helps us identify the type of parameter and its return type. This in turn helps us during development time. So for example, let\'s say another developer uses this function somewhere in their code. When writing the code, they will be prompted by the intellisense that the arguments should be of type `SqaureConfig`. \\r\\n\\r\\n## Conclusion\\r\\nYouTube will always be there with amazing resources. But Meetup takes the learning experience one step above. First of all, getting out of your bed on a Saturday, breaking the comfort zone of meeting unknown people is itself a huge leap. Next comes, how good a listener you are. Do you get distracted? Can you relate the topics under discussion with your current work? Do you have any questions? How well you frame your questions? When to ask your doubts? All this may sound a lot of work, but trust me, over time it will be helpful. I am sure, it will definitely help me.\\r\\n\\r\\nApart from personal development, I enjoyed the culture. The host had ordered Pizza for everyone and that is when we networked. We shared our experiences in the project with the current technology. There were open questions that everyone opinionated about. All in all, it was time well spent."},{"id":"the-minimalist-phone","metadata":{"permalink":"/blog/the-minimalist-phone","source":"@site/blog/2019-10-03-The-Minimalist-Phone.md","title":"The minimalist phone","description":"Smartphone\'s and in turn social media plays a very important role in our life, without which we would be stranded. Right? To a certain extent it is the truth. We use social media because we want to be connected. But we forget the toll it takes on our life through its continuous usage. In this post, I go through my journey from a social media addict to being a social media ghost.","date":"2019-10-03T00:00:00.000Z","formattedDate":"October 3, 2019","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"learning","permalink":"/blog/tags/learning"},{"label":"minimalism","permalink":"/blog/tags/minimalism"}],"readingTime":6.925,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"the-minimalist-phone","title":"The minimalist phone","tags":["personal","learning","minimalism"]},"prevItem":{"title":"First time attending a meetup - My Experience","permalink":"/blog/attending-meetup"},"nextItem":{"title":"A night of coding - Developer chaos","permalink":"/blog/night-coding"}},"content":"Smartphone\'s and in turn social media plays a very important role in our life, without which we would be stranded. Right? To a certain extent it is the truth. We use social media because we want to be connected. But we forget the toll it takes on our life through its continuous usage. In this post, I go through my journey from a social media addict to being a social media ghost. \\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## How it all started\\r\\nWith the invention of internet and its ease of availability, the youth were excited. We could explore various online platforms. It all started with Orkut. Then we learned about free blogging platforms like blogger. While social media was in rising, to think of it now, I realize that the craze was more towards the acceptance. What do I mean by acceptance? Every time we logged in to our internet (Yes, the dial-up days) and visited our profiles, we wanted to know how many scraps (Orkut) we got and who commented on our blog posts. Creating content was fun back then. We would feel connected and accepted to someone unknown.\\r\\n\\r\\n## The Smart Phone era\\r\\nTo be able to use internet, we would need a computer. Cybercaf\xe9 was in the rising. Internet hubs around the corner were occupied throughout. As long as we were in the Internet cafe, we were online, which was usually 1hr per day. This meant we still had an offline life per se. Even though we were always curious to know what happened online, we had to wait until the next day. Smart phones changed it all. Mobile phones which were always used for messaging and calling when turned into smart phones, things changed. We could be connected online 24/7, which in turn changed our mindset. From being accepted online to wanting to be accepted, our perspective changed.\\r\\n\\r\\nWith smartphones and cheap internet, we clicked Refresh every second. Every notification was important. I for one, installed Facebook, twitter, Orkut etc. I tried every application available on the play store. Somehow it made me feel important. With the demand of smartphone market rising, there was a huge competition in the social media applications which in turn lead for them to evolve.\\r\\n\\r\\nOne thing that impressed me about twitter or Facebook was their evolution. The decision makers at these companies were surely great thought leaders. They knew where the trend was. The implementation of infinite scroll in twitter/Facebook and also how they put in thoughts to improve the user experience of the application, impressed me. What they did? They ensured that despite of limited focus/attention of the user, they would glue the user for a longer time on their application.\\r\\n\\r\\n## My Addiction\\r\\nI wanted to be the part of the conversation. Be it twitter or Facebook. Every comment was important. Every like was cherished. I waited for #followfriday\'s. (A twitter trend where users would recommend to their followers, other users who they can follow). It may sound crazy, but all this was so important to me, as if my life dependent on it. Back then, I even wrote articles on why twitter was the best social media application.\\r\\n\\r\\nLater during the guilt trips, I would console myself thinking that I am learning about various topics, improving my general knowledge. Difficult to digest, but that was the truth. \\r\\n\\r\\n## Happy Realization\\r\\nSmart phones are boon, no doubt. But unless controlled by massive will power, they can be as good as a nuke. The realization struck me when my life turned havoc. I was not planning things ahead of time, always procrastinating. My priorities were unthought of. Most important, I had sleepless nights and tiring mornings. Things had to change. I had to bring in change to my own life and be able to control my actions. \\r\\n\\r\\n## The minimalist phone\\r\\nFirst thing first. Delete all the social media accounts. It is very difficult to delete a Facebook account, literally. The delete feature is hidden somewhere below the layers of Facebook, they would ask several questions and wait for couple of weeks before the account is deleted. Meanwhile if you login to some other application via Facebook, your Facebook account is activated back. Smart move Facebook. Whatsoever, I was able to delete my account. I then deleted the Facebook application. similar with twitter, Instagram and other trendy online social media applications. The idea was to clean my smartphone.\\r\\n\\r\\nNot just social media, I found that the news apps were useless too and contributed to the clutter. The idea was to have minimum screen time. These days smartphones come with such applications by default, so we need to go one step above to deactivate them from the system\'s settings.\\r\\n\\r\\nThe best option is to deactivate push notifications from each of the apps. No matter what, we don\'t want any notifications, or alerts etc on our mobile phone. Period.\\r\\n\\r\\n## What about other applications?\\r\\nYes, there are many applications that you may think are very important to you. Since I was on the path of achieving minimalist phone, my approach was to delete all the third party applications no matter what. Just clean the phone. Don\'t think about whether you will need it in future. Delete those social media applications, the news apps, the games, online shopping applications like amazon etc. \\r\\nDone? Yes, Done.\\r\\n\\r\\n## But what about when we really need those applications? \\r\\nThink about it, you never need any application. There is always an alternative.\\r\\nWant to read news? Open your laptop and go read news.\\r\\nWant to do online shopping? Again, go to your desktop.\\r\\nPlay games? Ok. But not on your mobile.\\r\\nWatch videos? YouTube on your desktop.\\r\\n\\r\\nWhat about if I really had to use any of the application? Who has stopped you from downloading it? Considering that we are connected 24/7 to internet, the application is just few minutes away from the download. Use it as per your need. Uninstall it again. Repeat in case of emergency. \\r\\n\\r\\n## Why a minimalist phone?\\r\\nA minimalist phone keeps you focused, attentive and forces you to speak and communicate with your colleagues and family. We often observe that in a meeting, most of the attendees are deeply immersed in their phone just hitting that refresh button, doing nothing. We take the speaker for granted. Imagine, how would you feel when you are speaking and everyone else is just physically present. You would feel rejected.\\r\\n\\r\\nYour smart phone is not the only way to stay connected. It is preferred way of staying connected because it involves minimum efforts. However, you miss the heart to heart connection which according to me is an important aspect for building strong relationships.\\r\\n\\r\\nI have been an advocate of not using social media for a long time now. I use very few applications on my smartphone. \\r\\n- Google photos - To keep all my photos synced.\\r\\n- YouTube - Because I follow technical tutorials.\\r\\n- Google podcast - To listen to podcasts on the move.\\r\\n- Google pay - To make digital transactions.\\r\\n\\r\\nI don\'t have my email configured on the phone. I like to check emails only when I want to.\\r\\n\\r\\n## What am I loosing with this minimalism?\\r\\nI don\'t know what most of my batchmates are doing. I don\'t know their birthday\'s and how many kids they have. Does it matter to me? Not really.\\r\\nWithout any news application, I have nearly zero general knowledge. I don\'t mind. As long as I am involved in something that solves a problem, I am happy to stay away from the paid journalism.\\r\\n\\r\\n## What are the advantages?\\r\\n- I feel less distracted\\r\\n- The time that was wasted in browsing online content, I now invest it into creating content. Creating content helps me think. I don\'t write for others, I write for myself. \\r\\n- I invest time in prototyping my own Ideas. Working on actual ideas help me rate my capability and improve my thinking.\\r\\n- The online drama would mean a lot of negativity. Right now, I wish to stay focused and filter unwanted opinions.\\r\\n\\r\\nI will not speak for or against social media. It has its own advantages. The question is, are we strong enough to understand its need in our lives? Can we justify its presence?"},{"id":"night-coding","metadata":{"permalink":"/blog/night-coding","source":"@site/blog/2019-08-07-A-night-of-Coding---Developer-chaos.md","title":"A night of coding - Developer chaos","description":"First, a little background. I had an important feature delivery in the coming week but due to personal work, had to take two days off on a short notice. This meant, I had to complete my current development tasks. \\"No Problemo !\\", I thought. My inspiration for working overnight comes form the movie, \\"The Social Network\\". I have mentioned about how amazing the soundtrack of the movie is, umpteen times, here on this blog. This essay is my retrospection per se on working overnight.","date":"2019-08-07T00:00:00.000Z","formattedDate":"August 7, 2019","tags":[{"label":"Essays","permalink":"/blog/tags/essays"},{"label":"personal","permalink":"/blog/tags/personal"},{"label":"learning","permalink":"/blog/tags/learning"}],"readingTime":6.59,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"night-coding","title":"A night of coding - Developer chaos","tags":["Essays","personal","learning"]},"prevItem":{"title":"The minimalist phone","permalink":"/blog/the-minimalist-phone"},"nextItem":{"title":"How I wasted 2hrs debugging my own code","permalink":"/blog/wasterd-2hrs-debugging"}},"content":"First, a little background. I had an important feature delivery in the coming week but due to personal work, had to take two days off on a short notice. This meant, I had to complete my current development tasks. \\"No Problemo !\\", I thought. My inspiration for working overnight comes form the movie, \\"The Social Network\\". I have mentioned about how amazing the soundtrack of the movie is, umpteen times, here on this blog. This essay is my retrospection per se on working overnight.\\r\\n\\r\\nWork commitments of an important feature delivery and family never go in hand. You will spend more time working compared to the time spent with family or honing your hobbies, the universal accepted law for the software professional by the software professional, always holds true. \\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nDue to personal work, I had to take two days off on a very short notice. This meant that I had to complete my current development tasks. The task at hand was doable, however there was a time crunch. The only option I had was to stretch and work overnight. I set a plan of action and put a checklist.\\r\\n- Drink black coffee (my favourite)\\r\\n- Listen to the soundtrack of the movie \\"The social network\\". (I am listening to it right now while I type this blog post)\\r\\n- Code, debug, repeat.\\r\\n- Log every half hour of my experience\\r\\n\\r\\nWith everything in order, I had my mind set to achieve the goal. I put a time check for 10.00 PM, when everyone in the family would be asleep allowing me to work on my tasks. \\r\\n\\r\\nThis post is my retrospection of working overnight. Let the fun begin.\\r\\n\\r\\n![Coffee and Computer](./assets/images/computer-and-coffee.jpg)\\r\\n\\r\\n## What went well?\\r\\nEverything was planned ahead of time. I had accounted for various tasks and had foreseen blockers. I had a clear picture of the development work that was expected from me. Since my code would be used by the backend team for further execution, I had to ensure that all the test cases were accounted for and taken care of well in advance.\\r\\n\\r\\n### No external distractions\\r\\nI could differentiate clearly the effects of working in an office environment versus working alone. There were no distractions, no small talks and it was peaceful. I could hear the tick of the clock every second, and I loved it. There were zero meetings and no chat messages. As opposing I am of group meetings, I understand that they are important. But when you have a deadline, meetings can be skipped. Working in silence, my concentration skyrocketed. \\r\\n\\r\\n### Extensive code comments\\r\\nI\'ve grown to honour the fact that extensive commenting is a necessity in every line of code that we write. As a developer, I had to re-visit my own code down the line and with a weak memory lane, it was always as good as reading someone else\'s piece of code. I would struggle. But with extensive commenting, It always becomes easier to deep dive in the codebase. \\r\\n\\r\\nWith clear and distraction free mindset, I spent quality time writing detailed comments. Sometimes, I would comment the flow of what I want to achieve followed by the line of code and sometimes it was vice versa. The point is, I could feel that my thoughts were crystal clear.\\r\\n\\r\\n### Ownership\\r\\nI was independently working on this task and had the complete ownership of it. This meant, I had to ensure that every corner of the testing be completed on time before the delivery. \\r\\n\\r\\nIt could have been the excitement of working overnight or it could be the sense of ownership, but I felt the responsibility of ensuring that I had completed everything on my tasks list.\\r\\n\\r\\n### End to end testing\\r\\nI was doing a module that was user facing i.e developing the User interface. There were some API\'s that were still under development. I did not want to be blocked so I figured a way around. I tried mocking the response signature which then helped me continue in my development. This may sound obvious but sometimes it so happens that some team members want to get all the work ready on which they are dependent instead of mocking their way around. \\r\\n\\r\\nHow did working overnight help me here?\\r\\nI googled my way around to see if there was any API service that I could use and sure there was, I found mocky. It is simple to use and I could also set delays on the response, which helped me test my loading API. If I had waited for the API, instead of writing this post, I would still be working on my task.\\r\\n\\r\\n### Coffee and Bourbon\\r\\nI have an affinity towards black coffee. I prepared a cup at my leisure and to add to the icing, I had an entire packet of bourbon (my favourite biscuits) at my disposal. The combination was amazing and it kept me intrigued.\\r\\n\\r\\n## What didn\'t go well\\r\\nNothing can be as perfect as it sounds. Working overnight also had its downsides. Even though it was a planned activity, coding may not always work as expected. Sometimes, a simple semicolon could give you a headache and if you loose patience, solving a tiny bug becomes horrendous. \\r\\n\\r\\n### Distractions\\r\\nEven though concentration skyrocketed, my coffee breaks ranged between 5 - 15 minutes every 30 minutes. Sometimes I would think about a problem only to realize that I was in some other world of thoughts altogether. It was funny. \\r\\n\\r\\n### Server restarts and cache deletions\\r\\nDespite of preparation, technical issues always arise. Our applications need a constant server restarts and most of the time when there are JavaScript changes, we need to always clear browser cache. Such tiny tasks take up mundane efforts which eventually lead to frustrations.\\r\\n\\r\\n![Server restarts](./assets/images/server.jpg)\\r\\n\\r\\n### Sleep deprivation\\r\\nAt around 2.00 AM, my eyes hurt. I wasn\'t feeling sleepy, but I wished I was in bed. My train of thoughts, basically it stopped. I could feel the tiredness. I was just half way through my work and it was a sad realization. I then realized that working late nights is not heroic as it sounds. \\r\\n\\r\\n### Hacker News FTW\\r\\nTo keep working, I visited Hacker News. Somehow I believed that since I was in the middle of the night, the amazing folks at the other side of the globe would be at work and would post some amazing links which would be upvoted and worth a read. In the end, the goal was to keep myself awake. \\r\\n\\r\\n## Conclusion\\r\\nThe experience was overall, amazing and at the same time very tiring.\\r\\n\\r\\nWhat did I learn?\\r\\n- Always finish your tasks on time. Stick to the deadlines.\\r\\n- In your task breakup, account for a buffer time. Due to uncertain circumstances, it may seem impossible to complete a task on a give timeline. You cannot calculate an exact time, but at least have yourself breathing time.\\r\\n- I would definitely not prefer working overnight. The body along with the mind needs a considerable amount of rest. Some of the most successful entrepreneurs may have turned stones into gold working late hours, but we cannot always step in their shoes. \\r\\n- A single night of experience may not be enough to reach to a conclusion. Working late hours was quite an experience. I would not recommend it.\\r\\n\\r\\nWhat next?\\r\\n- I have read and watched numerous videos about waking up at 4.00 AM and getting the maximum work done. I want to be able to try doing that some day. I do have my alarm set to 3.30 AM everyday and there is no shame in hiding the truth, I never was able to get up that early. But some day, I wish to overcome the sleep and set a target. Until I experience it first hand, I wouldn\'t be able to tell the difference."},{"id":"wasterd-2hrs-debugging","metadata":{"permalink":"/blog/wasterd-2hrs-debugging","source":"@site/blog/2019-07-10-How-I-Wasted-2hrs-debugging.md","title":"How I wasted 2hrs debugging my own code","description":"Writing code is fun, interesting and fulfilling. However, debugging is an equally important skill. Solving an issue sometimes may give you a taste of hell especially when you are not aware where to look for the root cause. At first, a defect may look simple, but figuring out what to debug and where to hunt demands for attention. Today was a fine morning, after sipping my coffee and afresh, I was sure I would destroy the task at hand point blank. Fate was not on my side and I hit a roadblock. I spent almost 2hrs trying to figure what could possibly go wrong, most of the time starring at the screen clueless. I needed a different perspective.","date":"2019-07-10T00:00:00.000Z","formattedDate":"July 10, 2019","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"debugging","permalink":"/blog/tags/debugging"},{"label":"learnings","permalink":"/blog/tags/learnings"}],"readingTime":5.59,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"wasterd-2hrs-debugging","title":"How I wasted 2hrs debugging my own code","tags":["personal","debugging","learnings"]},"prevItem":{"title":"A night of coding - Developer chaos","permalink":"/blog/night-coding"},"nextItem":{"title":"Advice I would give myself If I were in College","permalink":"/blog/advice-to-self"}},"content":"Writing code is fun, interesting and fulfilling. However, debugging is an equally important skill. Solving an issue sometimes may give you a taste of hell especially when you are not aware where to look for the root cause. At first, a defect may look simple, but figuring out what to debug and where to hunt demands for attention. Today was a fine morning, after sipping my coffee and afresh, I was sure I would destroy the task at hand point blank. Fate was not on my side and I hit a roadblock. I spent almost 2hrs trying to figure what could possibly go wrong, most of the time starring at the screen clueless. I needed a different perspective.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n### Background\\r\\n\\r\\nWe have a product in which we use `.less` to write our styles. Being a dojo/dijit integration, it already has many .less files in its theme. We then made our custom theme and created our own `.less` files which are then eventually converted to a single `.css` file.\\r\\n\\r\\nMy task at hand was to delete all the code that was written specifically for IE6 browser. Dojo adds a browser specific class to body which can then be used to target styles for that browser. I had to delete code. Easy. I love the delete button on my keyboard.\\r\\n\\r\\n\\r\\n### The Setup\\r\\n\\r\\nVisual Studio Code is my primary code editor and I used [Easy LESS extension](https://marketplace.visualstudio.com/items?itemName=mrcrowl.easy-less) to Auto-compile LESS to CSS on save. It worked really well. \\r\\nEvery time I saved a change in my `.less` file, it would show an indication in the status bar about the time required to convert the `.less` to `.css`\\r\\n\\r\\n![Visual Studio status bar message](./assets/images/vscode-status-message.jpg)\\r\\n\\r\\n### What Happened today\\r\\n\\r\\nI started deleting most obvious lines of code which I was pretty confident. I hit the ctrl+s to save my changes and then I opened my main`.less` file to compile all the changes throughout project. `main.less` basically has all the imports from various other files. For. eg import of button.less and `color.less` and so on. So after every change in a particular file, I had to compile `main.less` to get the final `.css` output. \\r\\n\\r\\nToday, when I saved the changes, I was expecting to see the compilation successful message. To my surprise, the editor message stuck to \\"Compiling LESS to CSS\\". I waited a longer but in vain.\\r\\n\\r\\n### Debug mistake - Looking at the wrong place\\r\\n\\r\\nSince the changes were not reflecting, I was not sure where to look for.\\r\\nI did not see any compilation error messages on the screen nor on the debug console or terminal or anything on the problems tab. Strange.\\r\\n\\r\\nI thought there was some issue with compiler.\\r\\n\\r\\n- I restarted my editor. It did not work\\r\\n- I then re-installed the Easy LESS extension, still it did not work\\r\\n- I remembered that we are using a special setting for compilation, i.e we are using relativeURL in our .less code, so I changed the settings. I saved the main.less file again and still it was stuck at the message.\\r\\n- I then reverted the changes and it was of no use.\\r\\n\\r\\nAfter following several trial and error attempts, I decided to discard the extension and look for another extension in the VS Code Marketplace. There, I found Easy Compile. I tried installing it, but this time the compilation would not work. I did not see any status message. Perhaps it needed some settings.\\r\\n\\r\\n### Loosing patience\\r\\n\\r\\nI then deleted the Easy Compile extension and restored back to Easy LESS extension. I had used this extension several times and I desperately wanted to get it working. I lost patience.\\r\\n\\r\\nI had to take break. I was already an hour and half doing stupid activities.\\r\\n\\r\\n### The problem\\r\\n\\r\\nI then looked with a fresh mind. At first I had concluded that the problem was with the compiler. I had to rethink my approach. Since the `main.less` has imports of various different .less files, I deleted the entire code in it and saved my changes.\\r\\n\\r\\nTo my surprise, the compilation message was successful. It returned an empty `main.css` file. The error was in the code. But where?\\r\\n\\r\\nIt hit me like a lightning bolt. I had made changes to the code. But why was I not getting any error message? I then realized, the file which I was compiling was different compared to the file which had error.\\r\\n\\r\\nAlso, the file in which I deleted that said variable compiled successfully. However the file which was using that variable had not been triggered for compilation. Hence no error logged. And that is why the main.less compilation was stuck.\\r\\n\\r\\n### The Solution\\r\\n\\r\\nI did a global search for the variable in question, deleted all the instances of it and compiled each file. I then compiled main.less file and got the final `.css` file. A lesson learned.\\r\\n\\r\\nBelow is how the error message appears on failed compilation.\\r\\n\\r\\n![Visual Studio Status Error message](./assets/images/vscode-status-errormessage.jpg)\\r\\n\\r\\n### Conclusion\\r\\n\\r\\nI learned very important lesson\\r\\n\\r\\n- Do not debug a issue based on wild guess and assumptions\\r\\n- Try to replicate the issue by making dramatic changes in the code. Observe if your changes lead to a better conclusion. For eg. In my main.less file, I deleted all the imports which should create at least a blank `.css` file. Since it created a blank `.css` file, I was at least assured that the compiler worked fine.\\r\\n- Test the positive scenarios to get an understanding of the code. Observe the pattern of how the code worked before making any changes.\\r\\n- Make obvious changes to the code to see if you are in the correct file. For example, introduce an alert or a debugger statement. This will ensure that you are making changes in the correct file.\\r\\n- Do not debug an issue on guess work. For example, by making code changes in a file that has similar name as the UI module you are trying to fix debug. This will only waste your debug efforts. Identify the correct source code file beforehand.\\r\\n- Re-installing the software and re-starting the computer should be the last option. Literally.\\r\\n- Be patient. Software does not work on hope and luck. Understand that software is written based on logic and algorithm and hence every output that you see on the screen has a base.\\r\\n\\r\\n\\r\\n#### P.S\\r\\nI had faced this same issue earlier around a year back. I did remember this but I could not recollect how I got my way through that time. I am documenting this experience for I know I would need it somewhere in the future. Also, I hope this helps someone on the interwebs."},{"id":"advice-to-self","metadata":{"permalink":"/blog/advice-to-self","source":"@site/blog/2019-06-14-Things-I-Wish-I-Knew-In-College.md","title":"Advice I would give myself If I were in College","description":"Computer science is the most sought for specialization in Engineering colleges, at least that\'s what I\'ve heard. When I entered my first year of college, I barely knew that Computer science means theoretical study of computers. Even though we had the best of the syllabus, I could hardly relate the theoretical knowledge with the practical world. Despite of having practical hands-on sessions on almost every subject which I think constituted 20% to 30% of the time we spent in the entire course, I found it difficult to understand the concepts. This was around 12 years back.","date":"2019-06-14T00:00:00.000Z","formattedDate":"June 14, 2019","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"advice","permalink":"/blog/tags/advice"},{"label":"learnings","permalink":"/blog/tags/learnings"}],"readingTime":11.64,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"advice-to-self","title":"Advice I would give myself If I were in College","tags":["personal","advice","learnings"]},"prevItem":{"title":"How I wasted 2hrs debugging my own code","permalink":"/blog/wasterd-2hrs-debugging"},"nextItem":{"title":"Things learned in 10 years of Experience as a Software Engineer","permalink":"/blog/ten-years-experiences"}},"content":"Computer science is the most sought for specialization in Engineering colleges, at least that\'s what I\'ve heard. When I entered my first year of college, I barely knew that Computer science means theoretical study of computers. Even though we had the best of the syllabus, I could hardly relate the theoretical knowledge with the practical world. Despite of having practical hands-on sessions on almost every subject which I think constituted 20% to 30% of the time we spent in the entire course, I found it difficult to understand the concepts. This was around 12 years back.\\r\\n\\r\\nAssuming that the current curriculum consists of theoretical knowledge, how can one outperform in college? After having a decade of experience, I try to explore and answer the question, *\\"what advice would I give myself if I were back in college?\\"*\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n### So what is it that changes now? \\r\\nResources. Period. We have easy access to Smartphones and every house has a good configuration laptop. However, the most decisive factor is availability of super high speed internet. Around a decade ago, personal computers were a dream and internet was costly. Did you know? We used dial-up connection. \\r\\n\\r\\n### Advice I would give myself If I were in college?\\r\\nThis essay is a retrospection to my Academic and Professional journey so far. I am still a student, learning everyday and trying to keep up with latest technologies. Considering that we have easily available resources, I want to write them here not just for me, but for anyone who reads this post.\\r\\n\\r\\n### 1. Enjoy your college life\\r\\nEnjoy every second of your college, make new friends and learn everyday. Most important, make mistakes and learn from them. Improve. While in college, you are not liable to anyone but you. Be Responsible. College is where you can shape your career. Make memories. \\r\\nP.S Most important, take photos, make videos. Have Fun.\\r\\n\\r\\n![Enjoy College](./assets/images/Enjoy-College.jpg)\\r\\n\\r\\n### 2. Read\\r\\nRead, technical books, fiction, dramas etc. At-least half-hour daily. How will that help? \\r\\n- With consistent reading, you will improve your vocabulary.\\r\\n- You will learn to speed-read, and in turn, you will understand and remember what you read for a longer period of time.\\r\\n- Reading wide range of topics will give you perspective. You will question things and sought answer to them. \\r\\n- Reading will boost your creativity.\\r\\n\\r\\n![Reading](./assets/images/Reading.jpg)\\r\\n\\r\\n### 3. Participate and Contribute\\r\\nIn this era of social media, instead of ~wasting~ utilizing your time in social media like Facebook, Instagram, participate in communities like stack overflow.\\r\\n\\r\\n##### a. StackOverflow:\\r\\nStack overflow is a reputed and highly visited (top 140 websites) community of developers who help each other to solve technical problems. You can build a good reputation on Stack overflow which will boost your career. StackOverflow has gamified their software, one gets rewarded for asking questions and most importantly answering to other people\'s posts. You get rewarded for correcting questions/answers too. With consistency, over the course of time, your profile will be evident to companies seeking for technically strong candidates. \\r\\n\\r\\n##### b. Open source:\\r\\nContribute to open source projects on GitHub. Create your profile on GitHub and publish your own projects or fork interesting projects and contribute to them. Do not hesitate to publish your source code online. As long as you are disciplined and consistent, pushing your code on GitHub will give you good exposure. But what will you push to GitHub? You can\\r\\n- Solve Hacker Rank/LeetCode challenges and publish your solution in GitHub\\r\\n- Work on simple projects like a Calculator, Birthday Reminder, Invoice generation, Web scrapper etc. Create such projects in different technologies like python, c++, JavaScript etc.\\r\\n\\r\\n##### c. MOOC (Massive open online course):\\r\\nMOOC are the next big thing. With plethora of online courses and with amazing instructors, try and complete as many interesting courses as possible. There are many websites like Coursera, EdX, Udemy etc. that provide good courses. The most important and the best part in participating and completing them is that you will get certificate. This will boost your profile. If you complete your course, you receive badges which you can publish on LinkedIn, your personal blog or any social media.\\r\\n\\r\\n##### d. FreeCodeCamp\\r\\n[FreeCodeCamp](https://www.freecodecamp.org/) is yet another MOOC, however it has thousands of exercise on front-end development. I found it real helpful to master technologies such as HTML, CSS and JavaScript. There are various inspirational stories on internet about how FreeCodeCamp helped someone get a good job. Having used it extensively, I can vouch for this platform. Not to forget, the certificate is completely free.\\r\\n \\r\\n### 4. Build a Brand\\r\\nCreate and Publish. Be Visible. Build a Brand. College is when you can invest your time in creative things. A brand is an identity through which everyone recognizes you. As a software engineer, what can you do?\\r\\n\\r\\n![Build a Brand](./assets/images/Build-Brand.jpg)\\r\\n\\r\\n##### a. Create your personal webpage.\\r\\nDid you know, you can create and host a webpage completely for free? There are many hosting services, but I would insist upon GitHub. With GitHub pages, you can create and host a static webpage. Apart from GitHub being completely free, another advantage is that if you consistently push your code to GitHub, it shows how passionate you are about open source, code commits, technology etc. All your projects and open source activities will be discoverable via GitHub.\\r\\n\\r\\n##### b. Write. Blog.\\r\\nJust as Reading is important, so is Writing.\\r\\n\\r\\nWhat to write? Where to write?\\r\\n\\r\\n- **Blog** : Maintaining an online log (blog) is beneficial. Writing helps you pen down your thoughts in a clear and concise manner. This means that you will be able to communicate better. In your job, you will be constantly writing emails, attending scrum meetings and writing requirement documents. Your habit of writing blog will help you better communicate your thoughts to the readers/managers/colleagues.\\r\\n\\r\\n- **Where to Blog?** : You can use blogger, WordPress etc blogging services, but I would insists on using Jekyll instead. I have an article on this blog about [why I choose to use Jekyll]({% post_url 2019-02-18-Why-Jekyll %}) as my blogging software. As long as you write consistently, it does not matter what blogging platform you are using. \\r\\n\\r\\n- **What to Blog?** : Blog your thoughts. Everything. I was inspired by the movie \\"The Social Network\\", when Mark Z. blogs about how he wishes to divert his mind and that he needs an idea. [Remember](https://www.youtube.com/watch?v=BPazh2kDdvA)? P.S : I am not promoting that you write about your girlfriend, but you get the gist. \\r\\n\\r\\n![Writing](./assets/images/Writing.jpg)\\r\\n\\r\\nLet\'s say you learn about some cool technology, you can write about what you learned from it. You can write about movie reviews or an idea that you want to pursue. Again, Blog your thoughts. My advice of writing everything under the sky is debatable. \\r\\n\\r\\nSome industry experts would say that, it is always better to write about topics that interest you and stick to the niche. You can then build an audience around your topic of expertise. For eg, if you write about fashion, do not write movie reviews. If you talk about technology, do not write about cooking. Yes, it is wise to stick to a niche topic, but hear me out. You are a student in college which means you would be just starting to explore blogging. Thus, being a beginner, you will want to learn about, what blogging is? How to promote yourself? What are analytics? What is SEO? etc. The answer to all these questions you will learn on the go. Consistency is the key. \\r\\n\\r\\n\\r\\n- **\\"Ok ok, I am sold. Anything else?\\"** : Hell yes! I missed the most important point. Besides improving your communication, vocabulary, creating an internet presence and overall growing intellectually, blogging will help you improve your typing speed. I am a huge advocate of using the keyboard without looking at it. Advantages? First of all, you will type faster, much accurate. Second, you will save a lot of time, you just need to look at the screen when you type. If you spent time looking at the keyboard searching for the right keys, you will then spend time on the screen to find typo. Twice the time utilised.\\r\\n\\r\\nI have to quote [Steve Yegge](http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html) on the use of keyboard here. He summarises the importance of using keyboard bull\'s eye.\\r\\n\\r\\n> \\"I can\'t understand why professional programmers out there allow themselves to have a career without teaching themselves to type. It doesn\'t make any sense. It\'s like being, I dunno, an actor without knowing how to put your clothes on. It\'s showing up to the game unprepared. It\'s coming to a meeting without your slides. Going to class without your homework. Swimming in the Olympics wearing a pair of Eddie Bauer Adventurer Shorts.\\"\\r\\n{: .bg-light .blockquote .text-right .p-4}\\r\\n\\r\\nThere are many games, that improve your typing skills. I encourage that you play once in a while those games.\\r\\n\\r\\nP.S : Look at your keyboard and touch the \\"F\\" and \\"J\\" keys. Do you feel anything different when comparing to any other keys on the keyboard? Go figure.\\r\\n\\r\\n### 5. Networking\\r\\nCollege is the best time to get involved. These days, there are many meetup\'s held to help students learn various technologies. Attend such meetups. Not only you will learn about the latest and the greatest but you will also learn about individuals. Try to follow the \\"SME\'s (Subject Matter Expert\'s) on social media or look at their open source repositories. Usually, these SME\'s are professionals with many years of hands-on experience.\\r\\n\\r\\nDuring meetups, share ideas, listen to the advocates, build a professional network. LinkedIn is the best web application that you can develop your professional network online. Make use of it extensively. \\r\\n\\r\\n\\r\\n### 6. Side Projects/ Hobby Projects\\r\\n\\r\\n![Hobby Projects](./assets/images/Hobby-Projects.jpg)\\r\\n\\r\\nI cannot stress more on the importance of Side Projects. Side projects are usually something that you do out of hobby apart from your daily routine. Being into the field of technology, a hobby project would be like *implementing an automated feed reader* or *creating a mobile application that notifies you about a quote daily in the morning*. Sky is the limit. Usually a side project is to bring into life an idea that you think will be useful to you. Sometimes, you find certain technology interesting which you want to explore. The best way to learn it would be to work on a project. Reading through tutorials and articles would just give your theoretical knowledge, but actual implementation and getting your hands dirty would teach you the technology.\\r\\n\\r\\nWhen working on hobby projects, ensure that you have a demo of your work hosted somewhere online. When someone visits your profile, it is always good to show a MVP (Minimal Viable Product) of your project. \\r\\n\\r\\n\\"I know Flutter\\" v/s \\"I\'ve made X using Flutter\\". Which statement do you think makes more impact?\\r\\n\\r\\n### 7. List of Useful Links and WebApps.\\r\\n- [GitHub](https://github.com/) : To host your code samples, build a static web page etc. [Git is the most widely used version control system](https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F). Just as how important learning a programming language is, so is important to be familiar with Git.\\r\\n\\r\\n- [StackOverflow](https://stackoverflow.com/) : is the largest, most trusted online community for anyone that codes to learn, share their knowledge, and build their careers.\\r\\n\\r\\n- [You should write Blogs](https://sites.google.com/site/steveyegge2/you-should-write-blogs) : A good article which inspired me to write my blog. This was published in the year 2005, but it is relevant till date.\\r\\n\\r\\n- [Write Code Everyday](https://johnresig.com/blog/write-code-every-day/) : Since the beginning of my career, I was highly inspired by JQuery Javascript Library and read a lot about its creator, John Resig. One of the blog post, \\"Write Code Everyday\\" by John Resig keeps me motivated. I have tried several times and having failed at it miserably, somewhere down I know that this is a good practice I need to force myself to keep up. I would urge that you read the article and inculcate it in your routine. \\r\\n\\r\\n- [HackerNews](https://news.ycombinator.com/) : Hacker News is user submitted high quality technical articles for exchanging news and sharing views. The articles shared are of high quality, so are the comments. Unlike any social media, hacker news is clean, clutter free and has top rated and upvoted articles.\\r\\n\\r\\n- [Paul Graham Essays](http://www.paulgraham.com/articles.html) : When I discovered Hacker News, I learned about YCombinator and Paul Graham. I learned about how the best of the best technology companies and their products are backed by YCombinator. I wanted to learn more and then I discovered inspiring essays by Paul Graham. One of them was [Hackers and Painters](http://www.paulgraham.com/hp.html). Paul Graham\'s insights into StartUp world and his advice out of his experience are amazing to read and learn from.\\r\\n\\r\\n- [CodingHorror](https://blog.codinghorror.com/) : Jeff AtWood\'s blog posts are insightful. Being a huge fan of StackOverflow, I had to learn about Jeff AtWood and Joel Spolsky who founded StackOverflow.\\r\\n\\r\\n- [We are Typist first, Programmers Second](https://blog.codinghorror.com/we-are-typists-first-programmers-second/) and [Programming\'s Dirtiest Little Secret](http://steve-yegge.blogspot.com/2008/09/programmings-dirtiest-little-secret.html) : These are gems worth reading. \\r\\n\\r\\n- [12 Steps to Better Code](https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/) : This article by Joel Spolsky has been quoted on various websites. It is worth bookmarking.\\r\\n\\r\\n---\\r\\n\\r\\n### Disciplin is the Key\\r\\nIf you look at the right resources and follow the right technology enthusiasts, you will learn a lot. Internet being so vast, it is common to get distracted and drifted. The click-baits and the recommendation engine to be blamed here. I use YouTube to learn various things and many times I get distracted by the recommendation engine and click on another video without completing the one I started on the first place. \\r\\n\\r\\nThus the most important advice I would give myself is to be disciplined. If you pick a task, finish it in one seating. Don\'t get distracted or diverted and do not procrastinate. Make a ToDo list and keep a track on hourly basis. Maintain a daily log of what you achieved and what went wrong throughout the day. Keep a positive attitude and always acknowledge your own actions."},{"id":"ten-years-experiences","metadata":{"permalink":"/blog/ten-years-experiences","source":"@site/blog/2019-06-03-things-I-learned-In-My-10Yrs-of-Experiance.md","title":"Things learned in 10 years of Experience as a Software Engineer","description":"I am a avid reader of HackerNews, I like to read about start-ups and I love to work with code. I started my career as a programmer working on web projects. I have had experiences working independently and with a huge team. In this post, I try to pen down my experiences as a software developer and some of the things I learned throughout this journey.","date":"2019-06-03T00:00:00.000Z","formattedDate":"June 3, 2019","tags":[{"label":"personal","permalink":"/blog/tags/personal"},{"label":"software","permalink":"/blog/tags/software"},{"label":"experience","permalink":"/blog/tags/experience"}],"readingTime":6.255,"hasTruncateMarker":true,"authors":[],"frontMatter":{"slug":"ten-years-experiences","title":"Things learned in 10 years of Experience as a Software Engineer","tags":["personal","software","experience"]},"prevItem":{"title":"Advice I would give myself If I were in College","permalink":"/blog/advice-to-self"}},"content":"I am a avid reader of HackerNews, I like to read about start-ups and I love to work with code. I started my career as a programmer working on web projects. I have had experiences working independently and with a huge team. In this post, I try to pen down my experiences as a software developer and some of the things I learned throughout this journey.\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n### Continuous learning\\r\\nAt first continuous learning sounds super daunting, but once you fall in love with the challenging problems and go on a quest to find optimal solution, you start enjoying. If you think the learning phase is up to graduation/post-graduation, then you are mistaken. A programmer will never stop learning. There will always be new technology out there which you may have to learn to keep up with your job and compete in this industry. A dormant, not-ready to upgrade their skills programmer will soon fall behind and will be left alone. It is as it sounds, cruel. But if you enjoy reading and learning about new technical fundamentals and you look forward to implementing what you learned, you will feel at home. What you learned today may not be applicable tomorrow, but if you can learn to appreciate this fact and accept the bitter sweet truth, then throughout your journey, every step you take will compound to the glory tomorrow or someday. \\r\\n\\r\\n### Be patient and understand the reason why the code was written\\r\\nWhen working in a team, do not judge the code written by your peers. I know of colleagues who constantly complain about some code that was written a long time ago  and how inefficient and vague it was. Rather than complain, my approach has always been to read carefully and understand how the legacy code works, try to figure out the bad parts and fix them. Sometimes a trivial piece of code which may appear to be useless to you may serve a very important purpose. Make sure before making any changes, proper due diligence is carried out.\\r\\n\\r\\nIf you think a piece of code can be improved, by all means go ahead, modify it. These days everyone uses code repository tools that keep track of the history of code changes. sometimes your code change may boost performance of your application, and sometimes it may break a functionality. By all means, make changes to the code if you feel so. We have peer reviews, QA team and product managers and leads to verify the changes and approve.\\r\\n\\r\\n### Always practice, work on side projects\\r\\nPractice your trade all the time. Try to work on an idea and create a side project. If you don\'t have an idea to work on, contribute to open source projects. You can also practice algorithm challenges on Hacker rank, Leetcode etc. Working on side projects opens up your perspective towards programming. Apart from your daily job, You have to discipline yourself and be consistent so as to complete your side projects. At times it becomes extremely difficult to squeeze in some time, but if you force yourself to a tiny commit on GitHub, you will be victorious. Again, all such activities compound to give you greater results over time. Side projects can be anything, and does not always have to be related to your career. If you have a hobby to paint, cook, write blogs, edit videos or make gaming videos, by all means, invest your time and energy in them.\\r\\nThe creator of Jquery, John Resig has a very important essay on his blog about the importance of Writing code everyday. Read it at [Write code everyday - By John Resig](https://johnresig.com/blog/write-code-every-day/)\\r\\n\\r\\n### Pen down your Experiences\\r\\nThe best way to remember a programming concept is to teach? Teaching does not mean you need a classroom full of students to get started. You can very well start by creating YouTube videos, or write technical blog posts and share on social media. Sometimes you may not know even the simplest of the things that you thought you were expert at, and it should not bring you down. Try to write a technical post about it while you research and learn more about it. You can write your own coding examples or explain the concept in a simpler language, this will not only help you, but it will also help those reading your article. And in case you need to revisit this technical concept in future, you know where to look for.\\r\\n\\r\\n![Lessons of a Software Engineer](./assets/images/things-learned-as-software-engineer.jpg)\\r\\n\\r\\n### This is not my domain of expertise\\r\\nIf you are working on a project and face any issues, instead of assuming that the issue is not related to your domain of expertise, try to backtrack and figure out the solution first before giving up. You may not know the programming language, but with some logic and understanding, you will be able to figure out how the code works. This will help narrow down the issue. And when you need to ask for help, you will be able to pin point and save time.\\r\\n\\r\\n### StackOverflow, Google to the rescue?\\r\\nFor programming related queries, Stack Overflow is THE go to place for every programmer. Chances that your query has already been answered are always high. However sometimes, you many not find the exact solution but then there might be a solution that is close to what you need. So read carefully all the suggestions. Do not hurry asking a question. Also, when you ask a question on Stack overflow, make sure to create a Proof of concept online on site like codepen etc. so that you narrow down the problem you are trying to solve. Anyone who wishes to help will not have to recreate the issue and will have a demo of what exactly you are trying to ask. Also mention what all you have already tried to solve the problem, so that it saves time of anyone who wants to help you. \\r\\n\\r\\nThe clear you are in asking your questions the higher the chances of you receiving an answer. \\r\\n\\r\\n### Be a user first, then be a Software developer\\r\\nHave you come across a software that you had the hardest time figuring out how it worked? Even a simple task would require a mundane amount of efforts? The reason being, not your ability to understand the software but the overlooking of the software developer who designed the software. Sometimes, an UI functionality to a software engineer would not be worthy of the efforts, but it may be a huge value addition to the end user. Always try to see a software from the perspective of the user. Try to understand how the User Experience can be improved because in the end, we develop a software to make life of the users easier. We want to usually automate the boring stuff. Right? The best way to see how the software would appeal to anyone is to help them walk through the process and the User Interface designs.\\r\\n\\r\\n---\\r\\n\\r\\nThis post cannot be concluded, there are so many golden nuggets that I can think of which needs a their own space. As a software engineer in this industry, the lessons I learn everyday are amazing. I cherish this journey and hence, I plan to continue on this series of post someday in future. I would love to hear about your journey. Please feel free to send me an email at codingbbq [@] gmail [dot] com"}]}')}}]);